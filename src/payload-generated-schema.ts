/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  serial,
  timestamp,
  numeric,
  jsonb,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'

export const product_options_values = pgTable(
  'product_options_values',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('product_options_values_order_idx').on(columns._order),
    _parentIDIdx: index('product_options_values_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [product_options.id],
      name: 'product_options_values_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const product_options = pgTable(
  'product_options',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    option: varchar('option'),
  },
  (columns) => ({
    _orderIdx: index('product_options_order_idx').on(columns._order),
    _parentIDIdx: index('product_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [product.id],
      name: 'product_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const product = pgTable(
  'product',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    product_updated_at_idx: index('product_updated_at_idx').on(columns.updatedAt),
    product_created_at_idx: index('product_created_at_idx').on(columns.createdAt),
  }),
)

export const products_variants_options = pgTable(
  'products_variants_options',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    option_id: varchar('option_id'),
    option: varchar('option').notNull(),
    value: varchar('value').notNull(),
    value_id: varchar('value_id'),
  },
  (columns) => ({
    _orderIdx: index('products_variants_options_order_idx').on(columns._order),
    _parentIDIdx: index('products_variants_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products_variants.id],
      name: 'products_variants_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_variants = pgTable(
  'products_variants',
  {
    id: serial('id').primaryKey(),
    vid: varchar('vid'),
    title: varchar('title').notNull(),
    price: numeric('price').notNull(),
    stock: numeric('stock'),
    product: integer('product_id')
      .notNull()
      .references(() => product.id, {
        onDelete: 'set null',
      }),
    order: numeric('order'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    products_variants_product_idx: index('products_variants_product_idx').on(columns.product),
    products_variants_updated_at_idx: index('products_variants_updated_at_idx').on(
      columns.updatedAt,
    ),
    products_variants_created_at_idx: index('products_variants_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const sales = pgTable(
  'sales',
  {
    id: serial('id').primaryKey(),
    customerName: varchar('customer_name').notNull(),
    email: varchar('email'),
    phone: varchar('phone'),
    address: varchar('address'),
    total: numeric('total'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    sales_updated_at_idx: index('sales_updated_at_idx').on(columns.updatedAt),
    sales_created_at_idx: index('sales_created_at_idx').on(columns.createdAt),
  }),
)

export const sales_rels = pgTable(
  'sales_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    salesItemsID: integer('sales_items_id'),
  },
  (columns) => ({
    order: index('sales_rels_order_idx').on(columns.order),
    parentIdx: index('sales_rels_parent_idx').on(columns.parent),
    pathIdx: index('sales_rels_path_idx').on(columns.path),
    sales_rels_sales_items_id_idx: index('sales_rels_sales_items_id_idx').on(columns.salesItemsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [sales.id],
      name: 'sales_rels_parent_fk',
    }).onDelete('cascade'),
    salesItemsIdFk: foreignKey({
      columns: [columns['salesItemsID']],
      foreignColumns: [sales_items.id],
      name: 'sales_rels_sales_items_fk',
    }).onDelete('cascade'),
  }),
)

export const sales_items = pgTable(
  'sales_items',
  {
    id: serial('id').primaryKey(),
    sale: integer('sale_id').references(() => sales.id, {
      onDelete: 'set null',
    }),
    product: integer('product_id')
      .notNull()
      .references(() => product.id, {
        onDelete: 'set null',
      }),
    product_variant: integer('product_variant_id')
      .notNull()
      .references(() => products_variants.id, {
        onDelete: 'set null',
      }),
    price: numeric('price'),
    quantity: numeric('quantity'),
    order: numeric('order'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    sales_items_sale_idx: index('sales_items_sale_idx').on(columns.sale),
    sales_items_product_idx: index('sales_items_product_idx').on(columns.product),
    sales_items_product_variant_idx: index('sales_items_product_variant_idx').on(
      columns.product_variant,
    ),
    sales_items_updated_at_idx: index('sales_items_updated_at_idx').on(columns.updatedAt),
    sales_items_created_at_idx: index('sales_items_created_at_idx').on(columns.createdAt),
  }),
)

export const book = pgTable(
  'book',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    book_updated_at_idx: index('book_updated_at_idx').on(columns.updatedAt),
    book_created_at_idx: index('book_created_at_idx').on(columns.createdAt),
  }),
)

export const editions = pgTable(
  'editions',
  {
    id: serial('id').primaryKey(),
    editionNumber: numeric('edition_number').notNull(),
    publishedYear: numeric('published_year'),
    book: integer('book_id').references(() => book.id, {
      onDelete: 'set null',
    }),
    order: numeric('order'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    editions_book_idx: index('editions_book_idx').on(columns.book),
    editions_updated_at_idx: index('editions_updated_at_idx').on(columns.updatedAt),
    editions_created_at_idx: index('editions_created_at_idx').on(columns.createdAt),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productID: integer('product_id'),
    productsVariantsID: integer('products_variants_id'),
    salesID: integer('sales_id'),
    salesItemsID: integer('sales_items_id'),
    bookID: integer('book_id'),
    editionsID: integer('editions_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_product_id_idx: index(
      'payload_locked_documents_rels_product_id_idx',
    ).on(columns.productID),
    payload_locked_documents_rels_products_variants_id_idx: index(
      'payload_locked_documents_rels_products_variants_id_idx',
    ).on(columns.productsVariantsID),
    payload_locked_documents_rels_sales_id_idx: index(
      'payload_locked_documents_rels_sales_id_idx',
    ).on(columns.salesID),
    payload_locked_documents_rels_sales_items_id_idx: index(
      'payload_locked_documents_rels_sales_items_id_idx',
    ).on(columns.salesItemsID),
    payload_locked_documents_rels_book_id_idx: index(
      'payload_locked_documents_rels_book_id_idx',
    ).on(columns.bookID),
    payload_locked_documents_rels_editions_id_idx: index(
      'payload_locked_documents_rels_editions_id_idx',
    ).on(columns.editionsID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    productIdFk: foreignKey({
      columns: [columns['productID']],
      foreignColumns: [product.id],
      name: 'payload_locked_documents_rels_product_fk',
    }).onDelete('cascade'),
    productsVariantsIdFk: foreignKey({
      columns: [columns['productsVariantsID']],
      foreignColumns: [products_variants.id],
      name: 'payload_locked_documents_rels_products_variants_fk',
    }).onDelete('cascade'),
    salesIdFk: foreignKey({
      columns: [columns['salesID']],
      foreignColumns: [sales.id],
      name: 'payload_locked_documents_rels_sales_fk',
    }).onDelete('cascade'),
    salesItemsIdFk: foreignKey({
      columns: [columns['salesItemsID']],
      foreignColumns: [sales_items.id],
      name: 'payload_locked_documents_rels_sales_items_fk',
    }).onDelete('cascade'),
    bookIdFk: foreignKey({
      columns: [columns['bookID']],
      foreignColumns: [book.id],
      name: 'payload_locked_documents_rels_book_fk',
    }).onDelete('cascade'),
    editionsIdFk: foreignKey({
      columns: [columns['editionsID']],
      foreignColumns: [editions.id],
      name: 'payload_locked_documents_rels_editions_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_product_options_values = relations(product_options_values, ({ one }) => ({
  _parentID: one(product_options, {
    fields: [product_options_values._parentID],
    references: [product_options.id],
    relationName: 'values',
  }),
}))
export const relations_product_options = relations(product_options, ({ one, many }) => ({
  _parentID: one(product, {
    fields: [product_options._parentID],
    references: [product.id],
    relationName: 'options',
  }),
  values: many(product_options_values, {
    relationName: 'values',
  }),
}))
export const relations_product = relations(product, ({ many }) => ({
  options: many(product_options, {
    relationName: 'options',
  }),
}))
export const relations_products_variants_options = relations(
  products_variants_options,
  ({ one }) => ({
    _parentID: one(products_variants, {
      fields: [products_variants_options._parentID],
      references: [products_variants.id],
      relationName: 'options',
    }),
  }),
)
export const relations_products_variants = relations(products_variants, ({ one, many }) => ({
  product: one(product, {
    fields: [products_variants.product],
    references: [product.id],
    relationName: 'product',
  }),
  options: many(products_variants_options, {
    relationName: 'options',
  }),
}))
export const relations_sales_rels = relations(sales_rels, ({ one }) => ({
  parent: one(sales, {
    fields: [sales_rels.parent],
    references: [sales.id],
    relationName: '_rels',
  }),
  salesItemsID: one(sales_items, {
    fields: [sales_rels.salesItemsID],
    references: [sales_items.id],
    relationName: 'salesItems',
  }),
}))
export const relations_sales = relations(sales, ({ many }) => ({
  _rels: many(sales_rels, {
    relationName: '_rels',
  }),
}))
export const relations_sales_items = relations(sales_items, ({ one }) => ({
  sale: one(sales, {
    fields: [sales_items.sale],
    references: [sales.id],
    relationName: 'sale',
  }),
  product: one(product, {
    fields: [sales_items.product],
    references: [product.id],
    relationName: 'product',
  }),
  product_variant: one(products_variants, {
    fields: [sales_items.product_variant],
    references: [products_variants.id],
    relationName: 'product_variant',
  }),
}))
export const relations_book = relations(book, () => ({}))
export const relations_editions = relations(editions, ({ one }) => ({
  book: one(book, {
    fields: [editions.book],
    references: [book.id],
    relationName: 'book',
  }),
}))
export const relations_users = relations(users, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    productID: one(product, {
      fields: [payload_locked_documents_rels.productID],
      references: [product.id],
      relationName: 'product',
    }),
    productsVariantsID: one(products_variants, {
      fields: [payload_locked_documents_rels.productsVariantsID],
      references: [products_variants.id],
      relationName: 'productsVariants',
    }),
    salesID: one(sales, {
      fields: [payload_locked_documents_rels.salesID],
      references: [sales.id],
      relationName: 'sales',
    }),
    salesItemsID: one(sales_items, {
      fields: [payload_locked_documents_rels.salesItemsID],
      references: [sales_items.id],
      relationName: 'salesItems',
    }),
    bookID: one(book, {
      fields: [payload_locked_documents_rels.bookID],
      references: [book.id],
      relationName: 'book',
    }),
    editionsID: one(editions, {
      fields: [payload_locked_documents_rels.editionsID],
      references: [editions.id],
      relationName: 'editions',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  product_options_values: typeof product_options_values
  product_options: typeof product_options
  product: typeof product
  products_variants_options: typeof products_variants_options
  products_variants: typeof products_variants
  sales: typeof sales
  sales_rels: typeof sales_rels
  sales_items: typeof sales_items
  book: typeof book
  editions: typeof editions
  users: typeof users
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_product_options_values: typeof relations_product_options_values
  relations_product_options: typeof relations_product_options
  relations_product: typeof relations_product
  relations_products_variants_options: typeof relations_products_variants_options
  relations_products_variants: typeof relations_products_variants
  relations_sales_rels: typeof relations_sales_rels
  relations_sales: typeof relations_sales
  relations_sales_items: typeof relations_sales_items
  relations_book: typeof relations_book
  relations_editions: typeof relations_editions
  relations_users: typeof relations_users
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
